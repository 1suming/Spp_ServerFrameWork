/********************************************
//文件名:commu.h
//功能:通讯类抽象接口
//作者:钟何明
//创建时间:2009.06.11
//修改记录:

*********************************************/
#ifndef _COMM_COMMUNICATION_COMMU_H_
#define _COMM_COMMUNICATION_COMMU_H_
#include <unistd.h>
#include <string.h>

#define COMMU_ERR_OVERLOAD_PKG 	-100
#define COMMU_ERR_OVERLOAD_CONN -200

namespace comm 
{
namespace commu 
{

//回调函数类型
typedef enum 
{
    CB_CONNECT = 0,
    CB_CONNECTED ,
    CB_DISCONNECT,
    CB_RECVDATA,
    CB_RECVERROR,
    CB_RECVDONE,
    CB_SENDDATA,
    CB_SENDERROR,
    CB_SENDDONE,
    CB_HANGUP, 
    CB_OVERLOAD,
    CB_TIMEOUT,
}cb_type;

//控制命令
typedef enum 
{
    CT_DISCONNECT = 0,  //断开连接（组件相关）
    CT_CLOSE,		 //清理资源（组件相关）
    CT_STAT,			//统计信息（组件相关）
    CT_LOAD,			//负载信息 (组件相关)
    CT_GET_CONN_EXT_INFO, //连接扩展信息(组件相关)
}ctrl_type;

//回调函数类型
//flow: 数据包唯一标示
//arg1: 通用参数指针1，一般指向数据blob
//arg2: 通用参数指针2，用户注册回调函数传入的自定义参数指针
typedef int (*cb_func) (unsigned flow, void* arg1, void* arg2);

//数据blob
typedef struct tagBlobType
{
    tagBlobType()
    {
        memset(this,0,sizeof(tagBlobType));
    }
    int len;//数据长度
    char* data;	//数据缓冲区
    void* owner;	//组件指针
    unsigned char ext_type;//扩展数据类型
    unsigned short ext_len;//扩展数据长度
    void* extdata;  //扩展数据
}blob_type;

const int MAX_BLOB_DATA_LEN = (1<<24);//16M
const unsigned short MAX_BLOB_EXTDATA_LEN = 0xffff;//64k

//扩展数据类型定义
const unsigned char EXT_TYPE_NONE = 0x00;//未使用
const unsigned char EXT_TYPE_CONNECTED= 0x01;//网络连接事件通知
const unsigned char EXT_TYPE_OVERLOAD = 0x02;//网络连接过载通知
const unsigned char EXT_TYPE_TIMEOUT = 0x03;//网络连接超时通知
const unsigned char EXT_TYPE_DISCONNECT = 0x04;//网络断开通知


const unsigned char EXT_TYPE_CONNEXTINFO = 0x10;//连接扩展信息
const unsigned char EXT_TYPE_CONNNODEINFO = 0x11;//连接节点信息

const unsigned char EXT_TYPE_USER_BASE = 0x80;//用户自定义类型


//连接扩展信息(作为blob_type中extdata部分)	
typedef struct
{
    int fd_;					//fd 
    int type_;					//fd type (SOCK_STREAM\SOCK_DGRAM\...)
    unsigned localip_;			//local ip
    unsigned short localport_;	//local port
    unsigned remoteip_;		//remote ip
    unsigned short remoteport_;	//remote port

}TConnExtInfo;


//通讯类抽象接口
class CTCommu
{
public:
    CTCommu()
    { 
        memset(func_list_, 0, sizeof(cb_func) * (CB_TIMEOUT + 1));
        memset(func_args_, 0, sizeof(void*) * (CB_TIMEOUT + 1));
    }
    virtual ~CTCommu(){}

    //初始化
    //[in] config：配置文件名或者配置参数内存指针
    //返回值:
    //	0:成功，-1:失败
    virtual int init(const void* config) = 0;

    //初始化
    //[in] config：配置文件名或者配置参数内存指针
    //	0:成功，-1:失败
    virtual int InitExt(const void * config){return -1;}

    //轮询，收发数据
    //block: true表示使用阻塞模式，否则非阻塞模式
    virtual int poll(bool block = false) = 0;

    //发送数据提交
    //flow: 数据包唯一标示
    //arg1: 通用参数指针1， 一般指向数据blob
    //arg2: 通用参数指针2，保留
    virtual int sendto(unsigned flow, void* arg1, void* arg2) = 0;

    //控制接口
    //flow: 数据包唯一标示
    //type: 控制命令
    //arg1: 通用参数指针1，具体组件有具体的含义
    //arg2: 通用参数指针2，具体组件有具体的含义
    virtual int ctrl(unsigned flow, ctrl_type type, void* arg1, void* arg2) = 0;

    //注册回调
    //type: 回调函数类型 
    //func: 回调函数
    //args: 用户自定义参数指针, 作为回调函数的第2个通用参数传递
    virtual int reg_cb(cb_type type, cb_func func, void* args = NULL)
    {
        if(type <= CB_TIMEOUT)
        {
            func_list_[type] = func;
            func_args_[type] = args;
            return 0;
        }
        else
        {
            return -1;
        }
    }
protected:
    cb_func func_list_[CB_TIMEOUT + 1];
    void* func_args_[CB_TIMEOUT + 1];

    //释放资源
    virtual void fini() = 0;
};

}
}
#endif 

